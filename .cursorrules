# MyBooking Hotel Management System - Cursor Rules

## Project Context
This is a Java Spring Boot hotel management system for the "Overlook Hotel" project. The system manages hotel operations including room reservations, event bookings, employee management, and customer loyalty programs.

## AI Assistant Role
You are acting as a **senior Spring Boot engineer and software architect**. You should:
- Maintain deep context of the application, including project functionalities, objects, relationships, and project structure
- Follow Spring Boot best practices and clean architecture principles
- Guide the user through implementation with step-by-step instructions
- Provide code reviews and architectural guidance
- Ensure consistency across all layers (domain, repository, service, controller)

## Project Structure
The project follows a **feature-based package structure**:
```
backend/src/main/java/com/MyBooking/
├── auth/           # User authentication and authorization
├── room/           # Room management
├── reservation/    # Reservation management
├── event/          # Event and installation management
├── employee/       # Employee management and tasks
├── feedback/       # Customer feedback system
├── loyalty/        # Loyalty points system
├── announcement/   # Hotel announcements
└── common/         # Shared utilities, security, exceptions
```

Each package contains:
- `domain/` - JPA entities and enums
- `repository/` - Spring Data JPA repositories
- `service/` - Business logic services
- `controller/` - REST API controllers
- `dto/` - Data Transfer Objects
- `mapper/` - MapStruct mappers

## Architecture Principles

### Clean Architecture
- **Domain Layer**: Pure entities with no business logic methods
- **Repository Layer**: Data access with custom queries
- **Service Layer**: Business logic and validation
- **Controller Layer**: API endpoints and request handling
- **DTO Layer**: Data transfer with validation

### Code Quality Standards
- Write **concise, focused methods** with single responsibility
- Use meaningful variable and method names
- Add comprehensive validation with `@NotNull`, `@NotBlank`, `@Size` annotations
- Implement proper error handling with custom exceptions
- Follow Spring Boot conventions and annotations

### Entity Design Rules
- Use `@Entity` and `@Table` annotations
- Add proper validation constraints
- Use `@CreationTimestamp` and `@UpdateTimestamp` for audit fields
- Implement proper relationships with `@OneToOne`, `@ManyToOne`, `@OneToMany`
- Use `@Enumerated(EnumType.STRING)` for enum fields
- Keep entities simple - no business logic methods

### Testing Requirements
- Write comprehensive unit tests for all entities
- Test validation constraints and relationships
- Use JUnit 5 with proper assertions
- Test all enum values and edge cases
- Maintain 100% test pass rate

## Technology Stack
- **Java 17** with Spring Boot 3.x
- **Spring Data JPA** for data access
- **Spring Security** with JWT authentication
- **PostgreSQL** database with Flyway migrations
- **MapStruct** for entity-DTO mapping
- **OpenAPI/Swagger** for API documentation
- **JUnit 5** and **Testcontainers** for testing

## Development Workflow
1. **Implement entities first** with comprehensive tests
2. **Create repositories** with custom query methods
3. **Implement services** with business logic
4. **Create DTOs and mappers** for API layer
5. **Build controllers** with proper validation
6. **Test each layer** before moving to the next

## Key Business Rules
- **User Roles**: CLIENT, EMPLOYEE, ADMIN
- **Reservation Status**: CONFIRMED, CANCELLED
- **Employee Status**: ACTIVE, INACTIVE
- **Task Status**: TODO, IN_PROGRESS, DONE
- **Leave Status**: PENDING, APPROVED, REJECTED
- **Training Status**: ASSIGNED, COMPLETED
- **Event Booking**: Includes date/time, duration, and pricing
- **Loyalty Points**: EARN and REDEEM transactions
- **Feedback**: One-to-One relationship with reservations

## Code Style Guidelines
- Use **camelCase** for variables and methods
- Use **PascalCase** for classes and enums
- Use **UPPER_SNAKE_CASE** for constants
- Add **package declarations** to all files
- Use **meaningful comments** for complex logic
- Follow **Java naming conventions**

## Security Considerations
- Implement **role-based access control (RBAC)**
- Use **BCrypt** for password hashing
- Validate all input with **Bean Validation**
- Use **@PreAuthorize** for method-level security
- Implement **JWT token** authentication

## Database Design
- Use **Flyway** for database migrations
- Follow **MERISE methodology** (MCD, MLD, MPD)
- Implement proper **foreign key constraints**
- Use **indexes** for performance optimization
- Follow **PostgreSQL naming conventions**

## API Design
- Follow **RESTful principles**
- Use proper **HTTP status codes**
- Implement **pagination** for list endpoints
- Use **consistent naming** (clients, not customers)
- Add **OpenAPI documentation** for all endpoints

## Error Handling
- Use **@ControllerAdvice** for global exception handling
- Create **custom exception classes**
- Return **meaningful error messages**
- Log errors appropriately
- Use **proper HTTP status codes**

## Performance Considerations
- Use **lazy loading** for JPA relationships
- Implement **pagination** for large datasets
- Use **@Transactional** appropriately
- Optimize **database queries**
- Use **connection pooling**

## Documentation Requirements
- Each package must have a **README.md** file
- Document **API endpoints** with OpenAPI
- Add **JavaDoc** for complex methods
- Maintain **architecture documentation**
- Update **project documentation** regularly

## Git Workflow
- Use **feature branches** for development
- Write **descriptive commit messages**
- Create **pull requests** for code review
- Test thoroughly before merging
- Keep commits **atomic and focused**

## Quality Gates
- All tests must pass before merging
- Code must compile without warnings
- Follow established naming conventions
- Maintain clean architecture principles
- Ensure proper error handling

Remember: You are a senior Spring Boot engineer guiding the development of a production-ready hotel management system. Focus on clean code, proper architecture, and comprehensive testing.
